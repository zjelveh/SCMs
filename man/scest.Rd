% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/scest.R
\name{scest}
\alias{scest}
\title{Synthetic Control Estimation for Single Treated Unit}
\usage{
scest(
  data,
  w.constr = NULL,
  feature_weights = "uniform",
  V = "separate",
  V.mat = NULL,
  solver = "ECOS",
  save.data = NULL
)
}
\arguments{
\item{data}{A list of class "scdata" containing the prepared data from \code{scdata()}.}

\item{w.constr}{List specifying constraints on the synthetic control weights. Options include:
\itemize{
\item \code{list(name = "simplex")} - Standard simplex constraint (weights sum to 1, non-negative)
\item \code{list(name = "lasso", Q = 0.1)} - L1 penalty with regularization parameter Q
\item \code{list(name = "ridge", Q = 0.1)} - L2 penalty with regularization parameter Q
\item \code{list(name = "ols")} - Ordinary least squares (no constraints)
\item \code{list(name = "L1-L2", Q1 = 0.1, Q2 = 0.1)} - Combined L1 and L2 penalties
}
Default is NULL (no constraints).}

\item{feature_weights}{Character. Method for weighting pre-treatment periods/features:
\itemize{
\item \code{"uniform"} - Equal weights for all periods (default)
\item \code{"optimize"} - Optimize feature weights using nested optimization
}}

\item{V}{Character or matrix specifying the feature weighting approach:
\itemize{
\item \code{"separate"} - Optimize V matrix separately (default)
\item \code{"nested"} - Nested optimization of V and W matrices
\item Custom matrix - User-provided V matrix
}}

\item{V.mat}{Matrix. Custom V (feature weighting) matrix. If provided, overrides V parameter.}

\item{solver}{Character. CVXR solver to use ("ECOS", "OSQP", "GUROBI", etc.).
Must be installed on system. Default is "ECOS".}

\item{save.data}{Logical. Whether to save input data in output object (for debugging). Default is NULL.}
}
\value{
A list of class "scest" containing:
\itemize{
\item \code{est.results$w} - Vector of synthetic control weights for donor units
\item \code{est.results$constant_term} - Constant (intercept) coefficient if \code{constant=TRUE} was used in scdata, NULL otherwise
\item \code{est.results$b} - Full coefficient vector (donor weights + constant term)
\item \code{est.results$Y.pre.fit} - Fitted pre-treatment outcomes
\item \code{est.results$Y.post.fit} - Fitted post-treatment outcomes
\item \code{est.results$V} - Feature weighting matrix used
\item \code{est.results$w.constr} - Weight constraint specification used
\item \code{data} - Original scdata object with estimation matrices
\item Additional estimation metadata and diagnostics
}
}
\description{
This function estimates synthetic control weights for a single treated unit using various
constraint specifications and optimization methods. It implements the core synthetic control methodology
with flexible constraint options and feature weighting schemes.
}
\details{
The function implements the synthetic control method by solving the optimization problem:
\deqn{\min_W ||X_1 - X_0 W||_V^2 + penalty(W)}

where \eqn{X_1} is the treated unit's pre-treatment characteristics, \eqn{X_0} is the control units'
characteristics matrix, \eqn{W} are the synthetic control weights, and \eqn{V} is the feature weighting matrix.

Different constraint types impose different penalty functions:
\itemize{
\item Simplex: \eqn{\sum W_i = 1, W_i \geq 0}
\item Lasso: \eqn{Q \sum |W_i|}
\item Ridge: \eqn{Q \sum W_i^2}
\item OLS: No constraints
}
}
\examples{
\dontrun{
# Basic simplex-constrained synthetic control
result <- scest(data = scm_data, 
                w.constr = list(name = "simplex"))

# Lasso-regularized synthetic control  
result_lasso <- scest(data = scm_data,
                      w.constr = list(name = "lasso", Q = 0.1))

# With optimized feature weights
result_opt <- scest(data = scm_data,
                    w.constr = list(name = "simplex"),
                    feature_weights = "optimize")
                    
# Using custom V matrix
custom_V <- diag(nrow(scm_data$Y.pre))
result_custom <- scest(data = scm_data,
                       w.constr = list(name = "simplex"),
                       V.mat = custom_V)
                       
# With constant term (requires scdata with constant=TRUE)
scm_data_const <- scdata(df = data, ..., constant = TRUE, 
                        covagg = list(...))  # Multiple features required
                        
# Simplex with constant - donor weights sum to 1, constant unconstrained
result_const_simplex <- scest(data = scm_data_const,
                              w.constr = list(name = "simplex"))
print(result_const_simplex$est.results$w)            # Donor weights 
print(result_const_simplex$est.results$constant_term) # Constant coefficient

# OLS with constant - no constraints on any coefficients
result_const_ols <- scest(data = scm_data_const,
                          w.constr = list(name = "ols"))
print(result_const_ols$est.results$constant_term)     # Can be positive/negative
}
}
